return(c(mean_rmse, mean_sd_test, mean_r_sq))
gamt <- lapply(seq(k), function(x){
ret <- lapply(seq(100), function(n){
set.seed(n)
s1 <-sample(nrow(wood), 0.8*nrow(wood))
train <- wood[s1,]
test <- wood[-s1,]
mod <- gam(Buche ~ s(Eiche, k=k, fx=TRUE), data=train) #keine penalty regression
pred <- as.numeric(predict(mod, newdata = test))
obsv <- test$Buche
rmse <- sqrt(mean((pred-obsv)**2))
sd_rmse <- sd(sqrt((pred-obsv)**2))
r_sq <- summary(mod)$r.sq
return(c(rmse, sd_rmse, r_sq))
})
rmse_test <- as.numeric(lapply(ret, function(l) l[[1]]))
mean_rmse <- mean(rmse_test)
sd_rmse_test <- as.numeric(lapply(ret, function(l) l[[2]]))
mean_sd_rmse <- mean(sd_rmse_test)
r_sq_test <- as.numeric(lapply(ret, function(l) l[[3]]))
mean_r_sq <- mean(r_sq_test)
return(c(mean_rmse, mean_sd_test, mean_r_sq))
})
gamt <- lapply(seq(k), function(x){
ret <- lapply(seq(100), function(n){
set.seed(n)
s1 <-sample(nrow(wood), 0.8*nrow(wood))
train <- wood[s1,]
test <- wood[-s1,]
mod <- gam(Buche ~ s(Eiche, k=k, fx=TRUE), data=train) #keine penalty regression
pred <- as.numeric(predict(mod, newdata = test))
obsv <- test$Buche
rmse <- sqrt(mean((pred-obsv)**2))
sd_rmse <- sd(sqrt((pred-obsv)**2))
r_sq <- summary(mod)$r.sq
return(c(rmse, sd_rmse, r_sq))
})
rmse_test <- as.numeric(lapply(ret, function(l) l[[1]]))
mean_rmse <- mean(rmse_test)
sd_rmse_test <- as.numeric(lapply(ret, function(l) l[[2]]))
mean_sd_rmse <- mean(sd_rmse_test)
r_sq_test <- as.numeric(lapply(ret, function(l) l[[3]]))
mean_r_sq <- mean(r_sq_test)
return(c(mean_rmse, mean_sd_rmse, mean_r_sq))
})
gamt
k <- seq(3, 13)
gamt <- lapply(seq(k), function(x){
ret <- lapply(seq(100), function(n){
set.seed(n)
s1 <-sample(nrow(wood), 0.8*nrow(wood))
train <- wood[s1,]
test <- wood[-s1,]
mod <- gam(Buche ~ s(Eiche, k=k, fx=TRUE), data=train) #keine penalty regression
pred <- as.numeric(predict(mod, newdata = test))
obsv <- test$Buche
rmse <- sqrt(mean((pred-obsv)**2))
sd_rmse <- sd(sqrt((pred-obsv)**2))
r_sq <- summary(mod)$r.sq
return(c(rmse, sd_rmse, r_sq))
})
rmse_test <- as.numeric(lapply(ret, function(l) l[[1]]))
mean_rmse <- mean(rmse_test)
sd_rmse_test <- as.numeric(lapply(ret, function(l) l[[2]]))
mean_sd_rmse <- mean(sd_rmse_test)
r_sq_test <- as.numeric(lapply(ret, function(l) l[[3]]))
mean_r_sq <- mean(r_sq_test)
return(c(mean_rmse, mean_sd_rmse, mean_r_sq))
})
k <- seq(3, 13)
gamt <- lapply(seq(k), function(x){
ret <- lapply(seq(100), function(n){
set.seed(n)
s1 <-sample(nrow(wood), 0.8*nrow(wood))
train <- wood[s1,]
test <- wood[-s1,]
mod <- gam(Buche ~ s(Eiche, k=k[k], fx=TRUE), data=train) #keine penalty regression
pred <- as.numeric(predict(mod, newdata = test))
obsv <- test$Buche
rmse <- sqrt(mean((pred-obsv)**2))
sd_rmse <- sd(sqrt((pred-obsv)**2))
r_sq <- summary(mod)$r.sq
return(c(rmse, sd_rmse, r_sq))
})
rmse_test <- as.numeric(lapply(ret, function(l) l[[1]]))
mean_rmse <- mean(rmse_test)
sd_rmse_test <- as.numeric(lapply(ret, function(l) l[[2]]))
mean_sd_rmse <- mean(sd_rmse_test)
r_sq_test <- as.numeric(lapply(ret, function(l) l[[3]]))
mean_r_sq <- mean(r_sq_test)
return(c(mean_rmse, mean_sd_rmse, mean_r_sq))
})
seq(k)
k <- seq(3, 13)
gamt <- lapply(seq(k), function(x){
ret <- lapply(seq(100), function(n){
set.seed(n)
s1 <-sample(nrow(wood), 0.8*nrow(wood))
train <- wood[s1,]
test <- wood[-s1,]
mod <- gam(Buche ~ s(Eiche, knots=k, fx=TRUE), data=train) #keine penalty regression
pred <- as.numeric(predict(mod, newdata = test))
obsv <- test$Buche
rmse <- sqrt(mean((pred-obsv)**2))
sd_rmse <- sd(sqrt((pred-obsv)**2))
r_sq <- summary(mod)$r.sq
return(c(rmse, sd_rmse, r_sq))
})
rmse_test <- as.numeric(lapply(ret, function(l) l[[1]]))
mean_rmse <- mean(rmse_test)
sd_rmse_test <- as.numeric(lapply(ret, function(l) l[[2]]))
mean_sd_rmse <- mean(sd_rmse_test)
r_sq_test <- as.numeric(lapply(ret, function(l) l[[3]]))
mean_r_sq <- mean(r_sq_test)
return(c(mean_rmse, mean_sd_rmse, mean_r_sq))
})
k <- seq(3, 13)
gamt <- lapply(seq(k), function(x){
ret <- lapply(seq(100), function(n){
set.seed(n)
s1 <-sample(nrow(wood), 0.8*nrow(wood))
train <- wood[s1,]
test <- wood[-s1,]
mod <- gam(Buche ~ s(Eiche, knots=k[k], fx=TRUE), data=train) #keine penalty regression
pred <- as.numeric(predict(mod, newdata = test))
obsv <- test$Buche
rmse <- sqrt(mean((pred-obsv)**2))
sd_rmse <- sd(sqrt((pred-obsv)**2))
r_sq <- summary(mod)$r.sq
return(c(rmse, sd_rmse, r_sq))
})
rmse_test <- as.numeric(lapply(ret, function(l) l[[1]]))
mean_rmse <- mean(rmse_test)
sd_rmse_test <- as.numeric(lapply(ret, function(l) l[[2]]))
mean_sd_rmse <- mean(sd_rmse_test)
r_sq_test <- as.numeric(lapply(ret, function(l) l[[3]]))
mean_r_sq <- mean(r_sq_test)
return(c(mean_rmse, mean_sd_rmse, mean_r_sq))
})
gamt <- lapply(seq(3,13), function(k){
ret <- lapply(seq(100), function(n){
set.seed(n)
s1 <-sample(nrow(wood), 0.8*nrow(wood))
train <- wood[s1,]
test <- wood[-s1,]
mod <- gam(Buche ~ s(Eiche, knots=k[k], fx=TRUE), data=train) #keine penalty regression
pred <- as.numeric(predict(mod, newdata = test))
obsv <- test$Buche
rmse <- sqrt(mean((pred-obsv)**2))
sd_rmse <- sd(sqrt((pred-obsv)**2))
r_sq <- summary(mod)$r.sq
return(c(rmse, sd_rmse, r_sq))
})
rmse_test <- as.numeric(lapply(ret, function(l) l[[1]]))
mean_rmse <- mean(rmse_test)
sd_rmse_test <- as.numeric(lapply(ret, function(l) l[[2]]))
mean_sd_rmse <- mean(sd_rmse_test)
r_sq_test <- as.numeric(lapply(ret, function(l) l[[3]]))
mean_r_sq <- mean(r_sq_test)
return(c(mean_rmse, mean_sd_rmse, mean_r_sq))
})
gamt <- lapply(seq(3,13), function(k){
ret <- lapply(seq(100), function(n){
set.seed(n)
s1 <-sample(nrow(wood), 0.8*nrow(wood))
train <- wood[s1,]
test <- wood[-s1,]
mod <- gam(Buche ~ s(Eiche, knots=k, fx=TRUE), data=train) #keine penalty regression
pred <- as.numeric(predict(mod, newdata = test))
obsv <- test$Buche
rmse <- sqrt(mean((pred-obsv)**2))
sd_rmse <- sd(sqrt((pred-obsv)**2))
r_sq <- summary(mod)$r.sq
return(c(rmse, sd_rmse, r_sq))
})
rmse_test <- as.numeric(lapply(ret, function(l) l[[1]]))
mean_rmse <- mean(rmse_test)
sd_rmse_test <- as.numeric(lapply(ret, function(l) l[[2]]))
mean_sd_rmse <- mean(sd_rmse_test)
r_sq_test <- as.numeric(lapply(ret, function(l) l[[3]]))
mean_r_sq <- mean(r_sq_test)
return(c(mean_rmse, mean_sd_rmse, mean_r_sq))
})
gamt <- lapply(seq(3,13), function(k){
ret <- lapply(seq(100), function(n){
set.seed(n)
s1 <-sample(nrow(wood), 0.8*nrow(wood))
train <- wood[s1,]
test <- wood[-s1,]
mod <- gam(Buche ~ s(Eiche, k=k, fx=TRUE), data=train) #keine penalty regression
pred <- as.numeric(predict(mod, newdata = test))
obsv <- test$Buche
rmse <- sqrt(mean((pred-obsv)**2))
sd_rmse <- sd(sqrt((pred-obsv)**2))
r_sq <- summary(mod)$r.sq
return(c(rmse, sd_rmse, r_sq))
})
rmse_test <- as.numeric(lapply(ret, function(l) l[[1]]))
mean_rmse <- mean(rmse_test)
sd_rmse_test <- as.numeric(lapply(ret, function(l) l[[2]]))
mean_sd_rmse <- mean(sd_rmse_test)
r_sq_test <- as.numeric(lapply(ret, function(l) l[[3]]))
mean_r_sq <- mean(r_sq_test)
return(c(mean_rmse, mean_sd_rmse, mean_r_sq))
})
gamt
gamt <- lapply(seq(3,13), function(k){
ret <- lapply(seq(100), function(n){
set.seed(n)
s1 <-sample(nrow(wood), 0.8*nrow(wood))
train <- wood[s1,]
test <- wood[-s1,]
mod <- gam(Buche ~ s(Eiche, k=k, fx=TRUE), data=train) #keine penalty regression
pred <- as.numeric(predict(mod, newdata = test))
obsv <- test$Buche
rmse <- sqrt(mean((pred-obsv)**2))
r_sq <- summary(mod)$r.sq
return(c(rmse, r_sq))
})
rmse_test <- as.numeric(lapply(ret, function(l) l[[1]]))
mean_rmse <- mean(rmse_test)
sd_rmse <- sd(rmse_test)
r_sq_test <- as.numeric(lapply(ret, function(l) l[[2]]))
mean_r_sq <- mean(r_sq_test)
return(c(mean_rmse, sd_rmse, mean_r_sq))
})
gamt
ret
ret <- lapply(seq(100), function(n){
set.seed(n)
s1 <-sample(nrow(wood), 0.8*nrow(wood))
train <- wood[s1,]
test <- wood[-s1,]
mod <- gam(Buche ~ s(Eiche, k=k, fx=TRUE), data=train) #keine penalty regression
pred <- as.numeric(predict(mod, newdata = test))
obsv <- test$Buche
rmse <- sqrt(mean((pred-obsv)**2))
r_sq <- summary(mod)$r.sq
return(c(rmse, r_sq))
})
gamt <- lapply(seq(3,13), function(k){
ret <- lapply(seq(100), function(n){
set.seed(n)
s1 <-sample(nrow(wood), 0.8*nrow(wood))
train <- wood[s1,]
test <- wood[-s1,]
mod <- gam(Buche ~ s(Eiche, k=k, fx=TRUE), data=train) #keine penalty regression
pred <- as.numeric(predict(mod, newdata = test))
obsv <- test$Buche
rmse <- sqrt(mean((pred-obsv)**2))
r_sq <- summary(mod)$r.sq
return(c(rmse, r_sq))
})
rmse_test <- as.numeric(lapply(ret, function(l) l[[1]]))
mean_rmse <- mean(rmse_test)
sd_rmse <- sd(rmse_test)
r_sq_test <- as.numeric(lapply(ret, function(l) l[[2]]))
mean_r_sq <- mean(r_sq_test)
return(c(mean_rmse, sd_rmse, mean_r_sq))
})
ret
source("C:/Users/mleza/Documents/msc-phygeo-ws-16/msc-phygeo-class-of-2016-MLezamaValdes/fun/paths.r")
wood <- read.csv(paste0(path_data_da, "csv/hessen_holzeinschlag_1997-2014_clean.csv"))
#k=3
gamt <- lapply(seq(3,13), function(k){
ret <- lapply(seq(100), function(n){
set.seed(n)
s1 <-sample(nrow(wood), 0.8*nrow(wood))
train <- wood[s1,]
test <- wood[-s1,]
mod <- gam(Buche ~ s(Eiche, k=k, fx=TRUE), data=train) #keine penalty regression
pred <- as.numeric(predict(mod, newdata = test))
obsv <- test$Buche
rmse <- sqrt(mean((pred-obsv)**2))
r_sq <- summary(mod)$r.sq
return(c(rmse, r_sq))
})
rmse_test <- as.numeric(lapply(ret, function(l) l[[1]]))
mean_rmse <- mean(rmse_test)
sd_rmse <- sd(rmse_test)
r_sq_test <- as.numeric(lapply(ret, function(l) l[[2]]))
mean_r_sq <- mean(r_sq_test)
return(c(mean_rmse, sd_rmse, mean_r_sq))
})
ret
gamt
gamtdf <- data.frame(matrix(unlist(gamt)))
gamtdf
View(gamtdf)
gamtdf <- data.frame(matrix(unlist(gamt), byrow = T))
gamtdf
gamtdf <- data.frame(matrix(unlist(gamt), nrow= 11, byrow = T))
gamtdf
plot(gamtdf$X1)
?plot
knots <- seq(3:13)
knots
knots <- c(3:13)
gamtdfÂ§ID <- knots
gamtdf$ID <- knots
gamtdf
gamtdf$knots <- knots
gamtdf
gamtdf$ID <- NULL
gamtdf
head(gamtdf)
plot(gamtdf$knots, gamtdf$X1)
names(gamtdf)
names(gamtdf) <- c("rmse", "SD_rmse", "adj.R2", "knots")
gamtdf
plot(gamtdf$knots, gamtdf$rmse)
gamtdf$sd+ <- gamtdf$rmse+gamtdf$SD_rmse
gamtdf$sdplus <- gamtdf$rmse+gamtdf$SD_rmse
gamtdf$sdminus <- gamtdf$rmse-gamtdf$SD_rmse
plot(c(gamtdf$knots, gamtdf$sdplus, gamtdf$sdminus), gamtdf$rmse)
plot(gamtdf$knots, gamtdf$rmse, line="l")
plot(gamtdf$knots, gamtdf$rmse, type="l")
line(gamtdf$knots, gamtdf$sdplus)
line(gamtdf$knots, gamtdf$sdplus)
lines(gamtdf$knots, gamtdf$sdplus)
lines(gamtdf$knots, gamtdf$sdminus)
lines(gamtdf$knots, gamtdf$sdminus)
View(gamtdf)
lines(gamtdf$knots, gamtdf$adj.R2)
plot(gamtdf$knots, gamtdf$rmse, type="l", ylim=c(1e-15, 500))
lines(gamtdf$knots, gamtdf$sdplus)
lines(gamtdf$knots, gamtdf$sdminus)
lines(gamtdf$knots, gamtdf$adj.R2)
plot(gamtdf$knots, gamtdf$rmse, type="l", ylim=c(1e-15, 300))
lines(gamtdf$knots, gamtdf$sdplus)
lines(gamtdf$knots, gamtdf$sdminus)
lines(gamtdf$knots, gamtdf$adj.R2)
plot(gamtdf$knots, gamtdf$rmse, type="l", ylim=c(1e-15, 500))
lines(gamtdf$knots, gamtdf$sdplus)
lines(gamtdf$knots, gamtdf$sdminus)
lines(gamtdf$knots, gamtdf$adj.R2)
knitr::opts_chunk$set(echo = TRUE)
source("C:/Users/mleza/Documents/msc-phygeo-ws-16/msc-phygeo-class-of-2016-MLezamaValdes/fun/paths.r")
outpath <- paste0(path_data_gis, "output_test4/")
dem <- paste0(path_gis_input_clean,"elevation.tif")
x <-477755.4
y <-5632178.4
sagaCmd <- paste0(path_saga_norm, "saga_cmd.exe")
#interactive workflow
twi_watershed <- function(outpath, dem, sagaCmd, x, y){
#convert dem to sgrd
gdalUtils::gdalwarp(dem, paste0(outpath,"dem.sdat"),
overwrite=TRUE,  of='SAGA')
#preparation:
#fill sinks
system(paste0(sagaCmd, " ta_preprocessor 4",
" -ELEV=",outpath, "dem.sgrd",
" -FILLED=",outpath,"dem_filled.sgrd")
)
#slope, aspect, curvature-tool (slope needed for calculation of TWI)
system(paste0(sagaCmd, " ta_morphometry 0",
" -ELEVATION=",outpath, "dem.sgrd",
" -SLOPE=",outpath,"slope.sgrd")
)
#calculate flow accumulation (Top-Down)
system(paste0(sagaCmd, " ta_hydrology 0",
" -ELEVATION=",outpath, "dem_filled.sgrd",
" -FLOW=",outpath,"flow_acc_td.sgrd")
)
#calculate TWI (goal of the process)
system(paste0(sagaCmd, " ta_hydrology 20",
" -SLOPE=",outpath, "slope.sgrd",
" -AREA=",outpath, "flow_acc_td.sgrd",
" -TWI=", outpath, "TWI.sgrd")
)
#calculate watershed for the outlet at 477755.4E, 5632178.4N (scale of the process)
system(paste0(sagaCmd, " ta_hydrology 4",
" -TARGET_PT_X",x,
" -TARGET_PT_Y",y,
" -ELEVATION=",outpath, "dem_filled.sgrd",
" -AREA=",outpath, "upslope.sgrd")
)
#reconverting .sgrd to .tif
gdalUtils::gdalwarp(paste0(outpath,"upslope.sdat"),
paste0(outpath,"upslope.tif"),
overwrite=TRUE, of="GTiff")
gdalUtils::gdalwarp(paste0(outpath,"TWI.sdat"),
paste0(outpath,"TWI.tif"),
overwrite=TRUE, of="GTiff")
#read upslope and twi-Rasters
upslope <- raster(paste0(outpath, "upslope.tif"))
twi <- raster(paste0(outpath, "TWI.tif"))
#form grid with twi for catchment area
twi_upslope <- twi
twi_upslope[upslope==0] <- NA
writeRaster(twi_upslope,paste0(outpath,"twi_upslope.tif"))
}
source("C:/Users/mleza/Documents/msc-phygeo-ws-16/msc-phygeo-class-of-2016-MLezamaValdes/fun/paths.r")
outpath <- paste0(path_data_gis, "output_test5/")
dem <- paste0(path_gis_input_clean,"elevation.tif")
x <-477755.4
y <-5632178.4
sagaCmd <- paste0(path_saga_norm, "saga_cmd.exe")
twi_watershed <- function(outpath, dem, sagaCmd, x, y){
#convert dem to sgrd
gdalUtils::gdalwarp(dem, paste0(outpath,"dem.sdat"),
overwrite=TRUE,  of='SAGA')
#preparation:
#fill sinks
system(paste0(sagaCmd, " ta_preprocessor 4",
" -ELEV=",outpath, "dem.sgrd",
" -FILLED=",outpath,"dem_filled.sgrd")
)
#slope, aspect, curvature-tool (slope needed for calculation of TWI)
system(paste0(sagaCmd, " ta_morphometry 0",
" -ELEVATION=",outpath, "dem.sgrd",
" -SLOPE=",outpath,"slope.sgrd")
)
#calculate flow accumulation (Top-Down)
system(paste0(sagaCmd, " ta_hydrology 0",
" -ELEVATION=",outpath, "dem_filled.sgrd",
" -FLOW=",outpath,"flow_acc_td.sgrd")
)
#calculate TWI (goal of the process)
system(paste0(sagaCmd, " ta_hydrology 20",
" -SLOPE=",outpath, "slope.sgrd",
" -AREA=",outpath, "flow_acc_td.sgrd",
" -TWI=", outpath, "TWI.sgrd")
)
#calculate watershed for the outlet at 477755.4E, 5632178.4N (scale of the process)
system(paste0(sagaCmd, " ta_hydrology 4",
" -TARGET_PT_X",x,
" -TARGET_PT_Y",y,
" -ELEVATION=",outpath, "dem_filled.sgrd",
" -AREA=",outpath, "upslope.sgrd")
)
#reconverting .sgrd to .tif
gdalUtils::gdalwarp(paste0(outpath,"upslope.sdat"),
paste0(outpath,"upslope.tif"),
overwrite=TRUE, of="GTiff")
gdalUtils::gdalwarp(paste0(outpath,"TWI.sdat"),
paste0(outpath,"TWI.tif"),
overwrite=TRUE, of="GTiff")
#read upslope and twi-Rasters
upslope <- raster(paste0(outpath, "upslope.tif"))
twi <- raster(paste0(outpath, "TWI.tif"))
#form grid with twi for catchment area
twi_upslope <- twi
twi_upslope[upslope==0] <- NA
writeRaster(twi_upslope,paste0(outpath,"twi_upslope.tif"))
}
twi_watershed(outpath, dem, sagaCmd, x, y)
library(raster)
upslope<-raster(paste0(gis_in_base, "upslope.tif"))
twi_watershed(outpath, dem, sagaCmd, x, y)
saga2 <- "C:\\Program Files\\QGIS 2.18\\bin"
saga2
cmd<-paste0(saga2, ' ta_channels 5 ',
" -DEM ",outpath, "dem.sgrd",
" -DIRECTION ", outpath,"flow_dir.sdat")
system(cmd)
cmd<-paste0(saga2, ' ta_channels 5 ',
" -DEM ",outpath, "dem.sgrd",
" -DIRECTION ", outpath,"flow_dir.sdat")
system(cmd)
paste0(saga2, ' ta_channels 5 ',
" -DEM ",outpath, "dem.sgrd",
" -DIRECTION ", outpath,"flow_dir.sdat")
saga2 <- "C:\\Program Files\\QGIS 2.18\\bin\\saga_gui.bat"
cmd<-paste0(saga2, ' ta_channels 5 ',
" -DEM ",outpath, "dem.sgrd",
" -DIRECTION ", outpath,"flow_dir.sdat")
system(cmd)
saga2
saga2 <- shQuote(C:\\Program Files\\QGIS 2.18\\bin\\saga_gui.bat)
saga2 <- shQuote("C:\\Program Files\\QGIS 2.18\\bin\\saga_gui.bat")
saga2
cmd<-paste0(saga2, ' ta_channels 5 ',
" -DEM ",outpath, "dem.sgrd",
" -DIRECTION ", outpath,"flow_dir.sdat")
system(cmd)
saga2 <- shQuote("C:\\Program Files\\QGIS 2.18\\apps\\saga\\saga_gui.exe")
cmd<-paste0(saga2, ' ta_channels 5 ',
" -DEM ",outpath, "dem.sgrd",
" -DIRECTION ", outpath,"flow_dir.sdat")
system(cmd)
install.packages("caret")
library(caret)
install.packages("nloptr")
library(caret)
install.packages("random.forest")
head(iris)
unique(iris$Species)
samples <- lapply(seq(ncol(smpl))), function(x){
list(train=iris[smpl[,x],]), test=iris{-smpl[,x],]}
}
samples <- lapply(seq(ncol(smpl)), function(x){
list(train=iris[smpl[,x],]), test=iris{-smpl[,x],]}
})
smpl <- createDataPartition(iris$Species, p=0.8, list=F, times=5) #5x 80% aus
samples <- lapply(seq(ncol(smpl)), function(x){
list(train=iris[smpl[,x],]), test=iris{-smpl[,x],]}
})
samples <- lapply(seq(ncol(smpl)), function(x){
list(train=iris[smpl[,x], ]), test=iris{-smpl[,x], ]}
})
samples <- lapply(seq(ncol(smpl)), function(x){
list(train=iris[smpl[,x], ]), test=iris{-smpl[,x], ]
})
samples <- lapply(seq(ncol(smpl)), function(x){
list(train=iris[smpl[,x], ]),
test=iris[-smpl[,x], ]
})
samples <- lapply(seq(ncol(smpl)), function(x){
list(train = iris[smpl[,x], ], test = iris[-smpl[,x],])
})
install.packages("randomForest")
